#! /bin/bash

# Plo script which is adapted with input parameters.

# Returns the mean position of a peak in the derivative of the variable y
# as a function of x for different values e of the variable
# v if condition c is satisfied. The mean position is calculated by excluding
# the values too far from the total mean (confidence interval at 99.7%)
# and those corresponding to extermums of x for the corresponding
# value of v.

y=$1 # peak in the derivative of y...
x=$2 # ...as a function of x...
e=$3 # ...for different values e...
v=$4 # ...corresponding to the variable v...
c=${5-1=1} # ...if condition c is satisfied

cat <<EOF
# determination of the positions of the peaks

for value 0 ${e}.n1-1
cal yvalue select(${y},${v}=${e}[value])
cal xvalue select(${x},${v}=${e}[value])
cal peak 0
if xvalue.n1>2
cal ypeak yvalue[1]-yvalue[0]
cal peak xvalue[0]
for index 1 xvalue.n1-2
if (yvalue[index+1]-yvalue[index])>ypeak
cal ypeak yvalue[index+1]-yvalue[index]
cal peak xvalue[index]
end
end
end
icol xpeak
if peak[0]>0&peak[0]!=xvalue.min&peak[0]!=xvalue.max&${c} get peak
end

# calculation of the mean and the confidence interval (using standard deviation)

< "_plo_mean_stdev xpeak
cal devpeak 3*stdev/sqrt(xpeak.n1)

# calculation of the final mean ("peak")

cal peak 0
cal lenpeak 0
for value 0 xpeak.n1-1
if abs(xpeak[value]-mean)<=devpeak cal peak peak+xpeak[value]
if abs(xpeak[value]-mean)<=devpeak cal lenpeak lenpeak+1
end
cal peak peak/lenpeak
EOF
